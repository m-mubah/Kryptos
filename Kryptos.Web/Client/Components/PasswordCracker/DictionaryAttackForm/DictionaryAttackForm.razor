@using Kryptos.Web.Shared.Models
<EditForm Model="@FormData" OnValidSubmit="@ValidFormSubmit" autocomplete="off">
    <DataAnnotationsValidator/>
    <div class="mb-6">
        <label for="hash-password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">
            Hash
        </label>
        <InputText @bind-Value="FormData.Hash"
                   id="hash-password"
                   class="block p-4 w-full text-gray-900 bg-gray-50 rounded-lg border border-gray-300 sm:text-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
        </InputText>
        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Only simple-case words will be processed.</p>
        <p class="validation-error">
            <ValidationMessage For="() => FormData.Hash"/>
        </p>
    </div>

    <div class="mb-6">
        <label for="hash-algorithm" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-400">
            Hash Algorithm
        </label>
        <InputSelect @bind-Value="FormData.HashAlgorithm"
                     id="hash-algorithm"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
            @foreach (var algorithm in Enum.GetValues(typeof(HashAlgorithm)))
            {
                <option value="@algorithm">@algorithm</option>
            }
        </InputSelect>
        <p class="validation-error">
            <ValidationMessage For="() => FormData.HashAlgorithm"/>
        </p>
    </div>

    @* <div class="mb-6"> *@
    @*     <label for="dictionary-upload" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300"> *@
    @*         Dictionary Upload *@
    @*     </label> *@
    @*     <InputFile  *@
    @*         id="dictionary-upload" *@
    @*         class="block w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 cursor-pointer dark:text-gray-400 focus:outline-none focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400"> *@
    @*     </InputFile> *@
    @*     <div class="mt-1 text-sm text-gray-500 dark:text-gray-300"> *@
    @*         Upload a .txt file under 200mb to use as a dictionary. *@
    @*     </div> *@
    @*     <p class="mt-2 text-sm text-red-600 dark:text-red-500"> *@
    @*         <ValidationMessage For="() => FormData.Hash"/> *@
    @*     </p> *@
    @* </div> *@

    @if (RequestLoading || IsConnected == false)
    {
        <button disabled="disabled" class="btn-primary-disabled">
            <div class="w-4 h-4 border-4 border-dashed rounded-full animate-spin dark:border-white"></div>
        </button>
    }
    else
    {
        <button type="submit" disabled="@ButtonDisabled"
                class="@(EditContext.Validate() ? "btn-primary" : "btn-primary-disabled")">
            Crack
        </button>
    }
</EditForm>


@if (ShowResult)
{
    <HashCrackingResult Result="@CrackingResult"/>
}